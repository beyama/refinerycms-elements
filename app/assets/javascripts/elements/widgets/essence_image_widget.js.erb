/** 
 * Image essence widget
 *
 * Events:
 * view:delete
 */
var template = 
  "<input name='{{name}}' value='{{value}}' type='hidden' class='current_image_id' />"                                                                       +
  "<div class='current_image_container' style='{{#toggleImageDisplay}}display: none;{{/toggleImageDisplay}}'>"                                               +
  "  <span class='toolbar' style='display: none;'>"                                                                                                          +
  "    <a href='#' class='remove_picked_image' title='" + I18n.t('js.admin.elements.essence_image_view.remove') + "'>"                                       +
  "      <img width='16' height='16' src='<%= asset_path 'refinery/icons/delete.png' %>' alt='" + I18n.t('js.admin.elements.essence_image_view.delete') + "'>"           +
  "    </a>"                                                                                                                                                 +
  "    <a href='#' class='crop_image' title='" + I18n.t('js.admin.elements.essence_image_view.crop') + "'>"                                                  +
  "      <img width='16' height='16' src='<%= asset_path 'elements/icons/cog.png' %>' alt='" + I18n.t('js.admin.elements.essence_image_view.crop') + "'>"    +
  "    </a>"                                                                                                                                                 +
  "    <a href='{{currentImageLinkHref}}' class='edit_picked_image' title='" + I18n.t('js.admin.elements.essence_image_view.change') + "'>"                  +
  "      <img width='16' height='16' src='<%= asset_path 'refinery/icons/application_edit.png' %>' alt='" + I18n.t('js.admin.elements.essence_image_view.change') + "'>" +
  "    </a>"                                                                                                                                                 +
  "    <a href='{{originalSrc}}' target='_blank' class='view_picked_image' title='" + I18n.t('js.admin.elements.essence_image_view.view') + "'>"             +
  "      <img width='16' height='16' src='<%= asset_path 'refinery/icons/eye.png' %>' alt='" + I18n.t('js.admin.elements.essence_image_view.view') + "'>"                +
  "    </a>"                                                                                                                                                 +
  "  </span>"                                                                                                                                                +
  "  <img class='current_picked_image' src='{{thumbnailSrc}}' alt='{{imageAlt}}' {{^hasImage}}style='display: none;'{{/hasImage}} />"                        +
  "  <a class='add_icon no_picked_image_selected dialog' href='{{currentImageLinkHref}}' {{#hasImage}}style='display: none;'{{/hasImage}}>"                  +
  "    " + I18n.t('js.admin.elements.essence_image_view.select')                                                                                             +
  "  </a>"                                                                                                                                                   +
  "  <br/>"                                                                                                                                                  +
  "</div>";
Elements.ElementsEditor.widgets.EssenceImageWidget = Elements.ElementsEditor.EssenceWidget.extend({
  yield: template,

  togglable: true,

  imageContainer: '.current_image_container',

  fieldSelector: '.current_image_id',

  toolbarSelector: '.toolbar',

  imageSelector: '.current_picked_image',

  noImageSelector: '.no_picked_image_selected',

  className: 'property field imageWidget',

  events: _.extend({}, Elements.ElementsEditor.EssenceWidget.prototype.events, {
    "click .remove_picked_image": "deleteImage",
    "click .crop_image": "openCropDialog",
    "mouseenter .current_image_container": "showToolbar",
    "mouseleave .current_image_container": "hideToolbar"
  }),

  initialize: function(){
    Elements.ElementsEditor.EssenceWidget.prototype.initialize.apply(this, arguments);

    if(!this.getValue()) {
      this.setValue(new Elements.EssenceImage());
      this.hasImage = false;
    } else {
      this.hasImage = true;
    }

    // Callback function
    var self = this;
    window[this.cid + '_changed'] = function(image){
      self.getValue().set(Elements.helper.extractDataFromImageDialog(image));
    }

    this.getValue().bind('change:id', function(model, id) {
      this.$(this.fieldSelector).val(id);
      if(!id || (typeof id === 'string' && !id.length))
        this.trigger('imageWidget:imageRemoved', this);
      else
        this.trigger('imageWidget:imageSelected', this);
    }, this);

    this.getValue().bind('change:thumbnail', function(model, url){
      if(!url || url.length == 0) {
        this.$(this.imageSelector).attr('src', '').hide();
        this.$(this.noImageSelector).fadeIn('fast');
        this.$(this.toolbarSelector).fadeOut('fast');
        this.hasImage = false;
      } else {
        this.$(this.imageSelector).attr('src', url).fadeIn('fast');
        this.$(this.noImageSelector).fadeOut('fast');
        this.hasImage = true;
      }
    }, this);

    this.getValue().bind('change:original', function(model, url) {
      url = (url && url.length > 0) ? url : '#';
      this.$('.view_picked_image').attr('href', url);
    }, this);

    this.getValue().bind('change:image_name', function(model, name) {
      this.$(this.imageSelector).attr({alt: name, title: name});
    }, this);

    this.bind('view:toggle', function() {
      this.$(this.imageContainer).slideToggle('fast');
    }, this);

    this.parent.bind('view:DOMNodeInserted', function onNodeInserted() {
      this.parent.unbind('view:DOMNodeInserted', onNodeInserted);

      window.init_modal_dialogs();
    }, this);

  }, 

  getInputName: function() {
    return this.parent.getInputName() + '[' + this.property.get('name') + '_id]';
  },

  getView: function(){
    var view = Elements.ElementsEditor.EssenceWidget.prototype.getView.apply(this, arguments);

    view.value = this.getValue().id;
    view.currentImageLinkHref = '/refinery/images/insert?callback=' + this.cid + '_changed' + '&width=866&height=510&dialog=true';
    view.toggleImageDisplay = false;
    view.hasImage = this.hasImage;
    view.originalSrc = '#';
    if(this.hasImage) {
      view.thumbnailSrc = this.getValue().get('thumbnail');
      view.originalSrc = this.getValue().get('original');
      view.imageAlt = this.getValue().get('image_name') || '';
    } 

    return view;
  },

  deleteImage: function() {
    if(!this.hasImage) return false;
    this.getValue().clear();
    this.trigger('view:delete', this);
    return false;
  },

  openCropDialog: function() {
    if(!this.hasImage) return false;
     
    var self = this;
    $.getJSON(
      '/admin/elements/documents/render_event_response',
      { source: 'image_cropper', type: 'show', id: this.getValue().id },
      function(data) {
        self.dialog = new Elements.ImageCropperDialog({ 
          el: $(data.view), 
          trueWidth: data.image_width,
          trueHeight: data.image_height,
          width: data.cropper_width, 
          height: data.cropper_height, 
        });

        self.dialog.bind('view:imageCropped', function(dialog, data) {
          this.getValue().set(data);
          dialog.remove();
        }, self);

        self.dialog.render();
      });
    return false;
  },

  showToolbar: function() {
    if(!this.hasImage) return;
    this.$(this.toolbarSelector).fadeIn();
  },

  hideToolbar: function(){
    if(!this.hasImage) return;
    this.$(this.toolbarSelector).fadeOut();
  }

});

/* vim: set filetype=javascript: */
