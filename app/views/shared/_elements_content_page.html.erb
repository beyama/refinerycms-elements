<%
  # provide a default array for collecting CSS for sections
  css = []

  css << @element.class.name.demodulize.underscore if @element

  # if 'sections' is passed in as a local_assigns, all of this is ignored.
  if local_assigns[:sections].blank?
    # always have a title
    sections = [{:yield => :body_content_title, :fallback => page_title, :title => true}]

    # append sections from this page.
    @page.parts.inject(sections) do |s, part|
      # we have some default yields, body_content_left and body_content_right
      # these map to 'body' and 'side_body' fields in default Refinery.
      section = {:fallback => part.body}
      section[:yield] = case (title_symbol = part.title.to_s.gsub(/\ /, '').underscore.to_sym)
        when :body then :body_content_left
        when :side_body then :body_content_right
        else title_symbol
        end

      # add section to the list unless we were specifically requested not to.
      # otherwise, add css saying it's been removed.
      unless (local_assigns[:hide_sections]||=[]).include?(section[:yield])
        s << section
      else
        css << "no_#{section[:yield]}"
      end
    end unless @page.nil? or @page.parts.blank?

    # Ensure that even without @page.parts we still have body_content_left and body_content_right
    all_yields = sections.collect{|s| s[:yield]}
    sections << {:yield => :body_content_left, :element_array => :elements} unless all_yields.include?(:body_content_left)
    sections << {:yield => :body_content_right, :element_array => :side_elements} unless all_yields.include?(:body_content_right)
  end

  # you can add more sections to the list using something like this:
  # sections |= [{:yield => :something_else, :fallback => another_method, :id => 'something'}]

  sections.each do |section|
    section[:html] = yield(section[:yield]) if section[:yield].present?

    if section[:html].blank? and !local_assigns[:show_empty_sections] and
      !local_assigns[:remove_automatic_sections] 

      if section.keys.include?(:fallback) and section[:fallback].present?
        section[:html] = raw(section[:fallback])
      elsif @element and (assoc = section[:element_array]).present? and @element.has_property?(assoc) and
        @element.class.property(assoc).array?
        section[:html] = render_cell('elements/element_array', :display, @element, assoc)
      end

    end

    dom_id = section[:id] || section[:yield]
    if section[:html].present?
      if section[:title]
        section[:html] = content_tag 'h1', section[:html], :id => dom_id
      else
        css_class = section[:class] 
        css_class = css_class.join(' ') if css_class.is_a?(Array)
        inner = content_tag 'div', section[:html], :class => 'inner'
        section[:html] = content_tag 'section', inner, :id => dom_id, :class => css_class
      end
    else
      css << "no_#{dom_id}"
    end
  end
-%>
<section id='body_content'<%= " class='#{css.join(' ')}'" if css.present? %>>
  <%= raw sections.map{|section| section[:html]}.join("\n") -%>
</section>
<%= render :partial => '/shared/draft_page_message' unless @page.nil? or @page.live? -%>
